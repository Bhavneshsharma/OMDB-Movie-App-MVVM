package com.deepexploit.fiprojectbhavnesh.view

import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.view.KeyEvent
import android.view.inputmethod.EditorInfo
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.databinding.DataBindingUtil
import androidx.lifecycle.ViewModelProvider
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.deepexploit.fiprojectbhavnesh.R
import com.deepexploit.fiprojectbhavnesh.adapters.RecyclerAdapter
import com.deepexploit.fiprojectbhavnesh.api.RetrofitHelper
import com.deepexploit.fiprojectbhavnesh.databinding.ActivityMainBinding
import com.deepexploit.fiprojectbhavnesh.model.ItemModel
import com.deepexploit.fiprojectbhavnesh.model.OmdbService
import com.deepexploit.fiprojectbhavnesh.repository.OmdbRepository
import com.deepexploit.fiprojectbhavnesh.viewModel.MainViewModel
import com.deepexploit.fiprojectbhavnesh.viewModel.MainViewModelFactory

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding
    lateinit var viewModel: MainViewModel
    private var pageNumber = 1
    private var searchText = "All"
    private var contentType = ""


    private val omDBAdapter by lazy {
        val itemObject = mutableListOf<ItemModel>()
        RecyclerAdapter(itemObject)
    }

    private val omDBLayoutManager by lazy {
        GridLayoutManager(this@MainActivity, 3)
    }

    override fun onResume() {
        super.onResume()

    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = DataBindingUtil.setContentView(this, R.layout.activity_main)

        val omdbService = RetrofitHelper.getInstance().create(OmdbService::class.java)
        val repository = OmdbRepository(omdbService)
        viewModel = ViewModelProvider(
            this,
            MainViewModelFactory(repository, searchText, pageNumber, contentType)
        )[MainViewModel::class.java]
        binding.lifecycleOwner = this
        binding.viewModel = viewModel

        viewModel.showsLiveData.observe(this) {
            viewModel.showLoader.value = false
            omDBAdapter.updateData(it, pageNumber == 1)
        }

        binding.homeGridRecycler.apply {
            this.layoutManager = omDBLayoutManager
            this.adapter = omDBAdapter
        }

        omDBAdapter.onItemClick = {
            val fragemnt = FragmentItemDetails()
            val bundle = Bundle()
            bundle.putParcelable(FragmentItemDetails.Companion.DATA_KEY, it)
            fragemnt.arguments = bundle
            fragemnt.show(supportFragmentManager, "testing")
        }

        viewModel.getData(searchText, pageNumber, contentType)
        binding.also {
            it.homeBtn.setOnClickListener {
                pageNumber = 1
                contentType = ""
                searchText = "All"
                viewModel.getData(searchText, pageNumber, contentType)
                viewModel.selectHome()
            }
            it.moviesBtn.setOnClickListener {
                pageNumber = 1
                contentType = "movie"
                viewModel.getData(searchText, pageNumber, contentType)
                viewModel.selectMovie()
            }
            it.seriesBtn.setOnClickListener {
                pageNumber = 1
                contentType = "series"
                viewModel.getData(searchText, pageNumber, contentType)
                viewModel.selectSeries()
            }
            it.episodeBtn.setOnClickListener {
                pageNumber = 1
                contentType = "episode"
                viewModel.getData(searchText, pageNumber, contentType)
                viewModel.selectEpisode()
            }
            it.search.setOnEditorActionListener(object : TextView.OnEditorActionListener {
                override fun onEditorAction(p0: TextView?, p1: Int, p2: KeyEvent?): Boolean {
                    if (p1 == EditorInfo.IME_ACTION_SEARCH) {
                        if (p0 != null) {
                            searchText = p0.text.toString()
                            contentType = ""
                            pageNumber = 1
                            viewModel.getData(searchText, pageNumber, contentType)
                            return true
                        }
                    }
                    return false
                }
            })

            it.search.addTextChangedListener(object : TextWatcher {
                override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
                }

                override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
                }

                override fun afterTextChanged(p0: Editable?) {
                    if (p0?.length == 0) {
                        binding.micIcon.setImageResource(R.drawable.ic_microphone)
                    } else {
                        binding.micIcon.setImageResource(R.drawable.ic_close_circle)
                        binding.micIcon.setOnClickListener {
                            binding.search.text.clear()
                        }
                    }
                }
            })
        }

        binding.homeGridRecycler.addOnScrollListener(object : RecyclerView.OnScrollListener() {
            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {
                super.onScrolled(recyclerView, dx, dy)

                val visibleItemCount = omDBLayoutManager.childCount
                val totalItemCount = omDBLayoutManager.itemCount
                val firstVisibleItemPosition: Int = omDBLayoutManager.findFirstVisibleItemPosition()

                if (!isLoading() && !isLastPage()) {
                    if (visibleItemCount + firstVisibleItemPosition >= totalItemCount
                        && firstVisibleItemPosition >= 0
                    ) {
                        loadMoreItems()
                    }
                }
            }
        });

    }

    private fun loadMoreItems() {
        pageNumber += 1
        viewModel.getData(searchText, pageNumber, contentType)
    }

    private fun isLastPage(): Boolean {
        return false
    }

    private fun isLoading(): Boolean {
        return false
    }
}